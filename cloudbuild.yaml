steps:
  # Step to install dependencies
  - id: pip-install
    name: 'python:3.9-slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        python -m venv venv && \
        . venv/bin/activate && \
        pip install -r requirements.txt

  # Step to build the Docker image
  - id: build
    name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '--target'
      - 'production'
      - '-t'
      - '$_AR_HOSTNAME/$_PROJECT_ID/$_AR_REPO/$_SERVICE_NAME:$COMMIT_SHA'
      - '.'

  # Step to push the Docker image
  - id: push
    name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '$_AR_HOSTNAME/$_PROJECT_ID/$_AR_REPO/$_SERVICE_NAME:$COMMIT_SHA'

  # Step to get secrets
  - id: get-secret
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      [
        '-c',
        "gcloud secrets versions access latest --secret=$_SECRET --format='get(payload.data)' | tr '_-' '/+' | base64 -d > /workspace/env.yaml",
      ]

  # Deploy to the primary region
  - id: deploy-region-primary
    name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - '$_SERVICE_NAME'
      - '--image'
      - '$_AR_HOSTNAME/$_PROJECT_ID/$_AR_REPO/$_SERVICE_NAME:$COMMIT_SHA'
      - '--region'
      - '$_PRIMARY_REGION'
      - "--env-vars-file=/workspace/env.yaml"
      - '--project'
      - '$_PROJECT_ID'
      - '--set-cloudsql-instances'
      - '$_CLOUDSQL_INSTANCE'
      - '--vpc-connector=$_VPC_CONNECTOR'
      - '--min-instances=3'
      - '--max-instances=5'

  # Deploy to the secondary region
  - id: deploy-region-secondary
    name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - '$_SERVICE_NAME'
      - '--image'
      - '$_AR_HOSTNAME/$_PROJECT_ID/$_AR_REPO/$_SERVICE_NAME:$COMMIT_SHA'
      - '--region'
      - '$_SECONDARY_REGION'
      - "--env-vars-file=/workspace/env.yaml"
      - '--project'
      - '$_PROJECT_ID'
      - '--set-cloudsql-instances'
      - '$_CLOUDSQL_INSTANCE'
      - '--vpc-connector=$_VPC_CONNECTOR-$_SECONDARY_REGION'
      - '--min-instances=3'
      - '--max-instances=5'

  # Create Backend Service
  - id: create-backend-service
    name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if ! gcloud compute backend-services describe $_SERVICE_NAME-backend --global > /dev/null 2>&1; then
          echo "Creating backend service $_SERVICE_NAME-backend...";
          gcloud compute backend-services create $_SERVICE_NAME-backend --global --protocol HTTP
        else
          echo "Backend service $_SERVICE_NAME-backend already exists. Skipping creation.";
        fi

  # Create URL Map
  - id: create-url-map
    name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if ! gcloud compute url-maps describe $_SERVICE_NAME-url-map > /dev/null 2>&1; then
          echo "Creating URL map $_SERVICE_NAME-url-map...";
          gcloud compute url-maps create $_SERVICE_NAME-url-map --default-service $_SERVICE_NAME-backend;
        else
          echo "URL map $_SERVICE_NAME-url-map already exists. Skipping creation.";
        fi

  - id: attach-neg-primary
    name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Verificando si el NEG $_SERVICE_NAME-primary ya est치 adjunto al servicio backend $_SERVICE_NAME-backend..."
        if gcloud compute backend-services describe $_SERVICE_NAME-backend --global --format="json" | grep -q "\"https://www.googleapis.com/compute/v1/projects/$_PROJECT_ID/regions/$_PRIMARY_REGION/networkEndpointGroups/$_SERVICE_NAME-primary\""; then
          echo "NEG $_SERVICE_NAME-primary ya est치 adjunto al servicio backend $_SERVICE_NAME-backend. Omitiendo."
        else
          echo "Adjuntando NEG $_SERVICE_NAME-primary al servicio backend $_SERVICE_NAME-backend..."
          gcloud compute backend-services add-backend $_SERVICE_NAME-backend --global \
            --network-endpoint-group $_SERVICE_NAME-primary \
            --network-endpoint-group-region $_PRIMARY_REGION \
            --capacity-scaler=0.5 \
            --balancing-mode CONNECTION \
            --max-connections-per-endpoint 1000
        fi

  - id: attach-neg-secondary
    name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Verificando si el NEG $_SERVICE_NAME-secondary ya est치 adjunto al servicio backend $_SERVICE_NAME-backend..."
        if gcloud compute backend-services describe $_SERVICE_NAME-backend --global --format="json" | grep -q "\"https://www.googleapis.com/compute/v1/projects/$_PROJECT_ID/regions/$_SECONDARY_REGION/networkEndpointGroups/$_SERVICE_NAME-secondary\""; then
          echo "NEG $_SERVICE_NAME-secondary ya est치 adjunto al servicio backend $_SERVICE_NAME-backend. Omitiendo."
        else
          echo "Adjuntando NEG $_SERVICE_NAME-secondary al servicio backend $_SERVICE_NAME-backend..."
          gcloud compute backend-services add-backend $_SERVICE_NAME-backend --global \
            --network-endpoint-group $_SERVICE_NAME-secondary \
            --network-endpoint-group-region $_SECONDARY_REGION \
            --capacity-scaler=0.5 \
            --balancing-mode CONNECTION \
            --max-connections-per-endpoint 1000
        fi

  # Create HTTP proxy
  - id: create-http-proxy
    name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if ! gcloud compute target-http-proxies describe $_SERVICE_NAME-http-proxy > /dev/null 2>&1; then
          echo "Creating HTTP proxy $_SERVICE_NAME-http-proxy...";
          gcloud compute target-http-proxies create $_SERVICE_NAME-http-proxy --url-map $_SERVICE_NAME-url-map;
        else
          echo "HTTP proxy $_SERVICE_NAME-http-proxy already exists. Skipping creation.";
        fi

  # Create forwarding rule
  - id: create-forwarding-rule
    name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if ! gcloud compute forwarding-rules describe $_SERVICE_NAME-forwarding-rule --global > /dev/null 2>&1; then
          echo "Creating forwarding rule $_SERVICE_NAME-forwarding-rule...";
          gcloud compute forwarding-rules create $_SERVICE_NAME-forwarding-rule --global --target-http-proxy $_SERVICE_NAME-http-proxy --ports 80;
        else
          echo "Forwarding rule $_SERVICE_NAME-forwarding-rule already exists. Skipping creation.";
        fi

options:
  logging: CLOUD_LOGGING_ONLY