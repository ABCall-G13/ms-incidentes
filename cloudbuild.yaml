steps:
  - id: pip-install
    name: 'python:3.9-slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        python -m venv venv && \
        . venv/bin/activate && \
        pip install -r requirements.txt

  - id: build
    name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '--target'
      - 'production'
      - '-t'
      - '$_AR_HOSTNAME/$_PROJECT_ID/$_AR_REPO/$_SERVICE_NAME:$COMMIT_SHA'
      - '.'

  - id: push
    name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '$_AR_HOSTNAME/$_PROJECT_ID/$_AR_REPO/$_SERVICE_NAME:$COMMIT_SHA'

  - id: get-secret
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      [
        '-c',
        "gcloud secrets versions access latest --secret=$_SECRET --format='get(payload.data)' | tr '_-' '/+' | base64 -d > /workspace/env.yaml",
      ]

  # Deploy to the primary region
  - id: deploy-region-primary
    name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - '$_SERVICE_NAME'
      - '--image'
      - '$_AR_HOSTNAME/$_PROJECT_ID/$_AR_REPO/$_SERVICE_NAME:$COMMIT_SHA'
      - '--region'
      - '$_PRIMARY_REGION'
      - "--env-vars-file=/workspace/env.yaml"
      - '--project'
      - '$_PROJECT_ID'
      - '--set-cloudsql-instances'
      - '$_CLOUDSQL_INSTANCE'
      - '--vpc-connector=$_VPC_CONNECTOR'
      - '--min-instances=3'
      - '--max-instances=5'

  # Deploy to the secondary region
  - id: deploy-region-secondary
    name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - '$_SERVICE_NAME'
      - '--image'
      - '$_AR_HOSTNAME/$_PROJECT_ID/$_AR_REPO/$_SERVICE_NAME:$COMMIT_SHA'
      - '--region'
      - '$_SECONDARY_REGION'
      - "--env-vars-file=/workspace/env.yaml"
      - '--project'
      - '$_PROJECT_ID'
      - '--set-cloudsql-instances'
      - '$_CLOUDSQL_INSTANCE'
      - '--vpc-connector=$_VPC_CONNECTOR-$_SECONDARY_REGION'
      - '--min-instances=3'
      - '--max-instances=5'
    
  
  - id: create-backend-service
    name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - 'compute'
      - 'backend-services'
      - 'create'
      - '$_SERVICE_NAME-backend'
      - '--global'
      - '--protocol'
      - 'HTTP'

  # Step to create a URL map
  - id: create-url-map
    name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - 'compute'
      - 'url-maps'
      - 'create'
      - '$_SERVICE_NAME-url-map'
      - '--default-service'
      - '$_SERVICE_NAME'

  # Step to create NEGs (Network Endpoint Groups) in multiple regions
  - id: create-neg-primary
    name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - 'compute'
      - 'network-endpoint-groups'
      - 'create'
      - '$_SERVICE_NAME-primary'
      - '--region'
      - '$_PRIMARY_REGION'
      - '--network-endpoint-type'
      - 'SERVERLESS'
      - '--cloud-run-service'
      - '$_SERVICE_NAME'

  - id: create-neg-secondary
    name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - 'compute'
      - 'network-endpoint-groups'
      - 'create'
      - '$_SERVICE_NAME-secondary'
      - '--region'
      - '$_SECONDARY_REGION'
      - '--network-endpoint-type'
      - 'SERVERLESS'
      - '--cloud-run-service'
      - '$_SERVICE_NAME'

  # Step to attach NEGs to backend service
  - id: attach-neg-primary
    name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - 'compute'
      - 'backend-services'
      - 'add-backend'
      - '$_SERVICE_NAME-backend'
      - '--global'
      - '--network-endpoint-group'
      - '$_SERVICE_NAME-primary'
      - '--network-endpoint-group-region'
      - '$_PRIMARY_REGION'

  - id: attach-neg-secondary
    name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - 'compute'
      - 'backend-services'
      - 'add-backend'
      - '$_SERVICE_NAME-backend'
      - '--global'
      - '--network-endpoint-group'
      - '$_SERVICE_NAME-secondary'
      - '--network-endpoint-group-region'
      - '$_SECONDARY_REGION'

  # Step to create a target HTTP proxy
  - id: create-http-proxy
    name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - 'compute'
      - 'target-http-proxies'
      - 'create'
      - '$_SERVICE_NAME-http-proxy'
      - '--url-map'
      - '$_SERVICE_NAME-url-map'

  # Step to create a global forwarding rule
  - id: create-forwarding-rule
    name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - 'compute'
      - 'forwarding-rules'
      - 'create'
      - '$_SERVICE_NAME-forwarding-rule'
      - '--global'
      - '--target-http-proxy'
      - '$_SERVICE_NAME-http-proxy'
      - '--ports'
      - '80'

options:
  logging: CLOUD_LOGGING_ONLY