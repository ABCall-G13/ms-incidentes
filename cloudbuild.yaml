steps:
  # Step to install dependencies
  - id: pip-install
    name: 'python:3.9-slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        python -m venv venv && \
        . venv/bin/activate && \
        pip install -r requirements.txt

  # Step to build the Docker image
  - id: build
    name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '--target'
      - 'production'
      - '-t'
      - '$_AR_HOSTNAME/$_PROJECT_ID/$_AR_REPO/$_SERVICE_NAME:$COMMIT_SHA'
      - '.'

  # Step to push the Docker image
  - id: push
    name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '$_AR_HOSTNAME/$_PROJECT_ID/$_AR_REPO/$_SERVICE_NAME:$COMMIT_SHA'

  # Step to get secrets
  - id: get-secret
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      [
        '-c',
        "gcloud secrets versions access latest --secret=$_SECRET --format='get(payload.data)' | tr '_-' '/+' | base64 -d > /workspace/env.yaml",
      ]

  # Deploy to the primary region
  - id: deploy-region-primary
    name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - '$_SERVICE_NAME'
      - '--image'
      - '$_AR_HOSTNAME/$_PROJECT_ID/$_AR_REPO/$_SERVICE_NAME:$COMMIT_SHA'
      - '--region'
      - '$_PRIMARY_REGION'
      - "--env-vars-file=/workspace/env.yaml"
      - '--project'
      - '$_PROJECT_ID'
      - '--set-cloudsql-instances'
      - '$_CLOUDSQL_INSTANCE'
      - '--vpc-connector=$_VPC_CONNECTOR'
      - '--min-instances=3'
      - '--max-instances=5'

  # Deploy to the secondary region
  - id: deploy-region-secondary
    name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - '$_SERVICE_NAME'
      - '--image'
      - '$_AR_HOSTNAME/$_PROJECT_ID/$_AR_REPO/$_SERVICE_NAME:$COMMIT_SHA'
      - '--region'
      - '$_SECONDARY_REGION'
      - "--env-vars-file=/workspace/env.yaml"
      - '--project'
      - '$_PROJECT_ID'
      - '--set-cloudsql-instances'
      - '$_CLOUDSQL_INSTANCE'
      - '--vpc-connector=$_VPC_CONNECTOR-$_SECONDARY_REGION'
      - '--min-instances=3'
      - '--max-instances=5'

  # Reservar una dirección IP global estática para el balanceador de carga
  - id: reserve-global-static-ip
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if ! gcloud compute addresses describe "${_SERVICE_NAME}-ip" --global &> /dev/null; then
          echo "Reserving global static IP..."
          gcloud compute addresses create "${_SERVICE_NAME}-ip" \
            --global \
            --network-tier=PREMIUM
        else
          echo "Global static IP '${_SERVICE_NAME}-ip' already exists."
        fi

  # Crear NEGs sin servidores para cada región
  - id: create-serverless-negs
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        for region in $_PRIMARY_REGION $_SECONDARY_REGION; do
          if ! gcloud compute network-endpoint-groups describe "${_SERVICE_NAME}-${region}-neg" --region="$region" &> /dev/null; then
            echo "Creating Serverless NEG ${_SERVICE_NAME}-${region}-neg in $region..."
            gcloud compute network-endpoint-groups create "${_SERVICE_NAME}-${region}-neg" \
              --region="$region" \
              --network-endpoint-type=SERVERLESS \
              --cloud-run-service=$_SERVICE_NAME
          else
            echo "Serverless NEG $${_SERVICE_NAME}-${region}-neg already exists in $region."
          fi
        done

  # Crear un servicio de backend global
  - id: create-global-backend-service
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if ! gcloud compute backend-services describe "${_SERVICE_NAME}-global-backend" --global &> /dev/null; then
          echo "Creating Global Backend Service..."
          gcloud compute backend-services create "${_SERVICE_NAME}-global-backend" \
            --global \
            --load-balancing-scheme=EXTERNAL
          for region in $_PRIMARY_REGION $_SECONDARY_REGION; do
            echo "Adding NEG ${_SERVICE_NAME}-${region}-neg to the global backend service..."
            gcloud compute backend-services add-backend "${_SERVICE_NAME}-global-backend" \
              --global \
              --network-endpoint-group="${_SERVICE_NAME}-${region}-neg" \
              --network-endpoint-group-region="$region"
          done
        else
          echo "Global Backend Service '${_SERVICE_NAME}-global-backend' already exists."
        fi


  # Crear un URL map global
  - id: create-global-url-map
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if ! gcloud compute url-maps describe "${_SERVICE_NAME}-global-url-map" --global &> /dev/null; then
          echo "Creating Global URL Map..."
          gcloud compute url-maps create "${_SERVICE_NAME}-global-url-map" \
            --default-service="${_SERVICE_NAME}-global-backend"
        else
          echo "Global URL Map '${_SERVICE_NAME}-global-url-map' already exists."
        fi

  - id: create-global-http-proxy
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if ! gcloud compute target-http-proxies describe "${_SERVICE_NAME}-global-http-proxy" --global &> /dev/null; then
          echo "Creating Global HTTP Proxy..."
          gcloud compute target-http-proxies create "${_SERVICE_NAME}-global-http-proxy" \
            --url-map="${_SERVICE_NAME}-global-url-map"
        else
          echo "Global HTTP Proxy '${_SERVICE_NAME}-global-http-proxy' already exists."
        fi

  # Crear una regla de reenvío global
  - id: create-global-forwarding-rule
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if ! gcloud compute forwarding-rules describe "${_SERVICE_NAME}-forwarding-rule" --global &> /dev/null; then
          echo "Creating Global Forwarding Rule..."
          gcloud compute forwarding-rules create "${_SERVICE_NAME}-forwarding-rule" \
            --global \
            --load-balancing-scheme=EXTERNAL \
            --network-tier=PREMIUM \
            --target-http-proxy="${_SERVICE_NAME}-global-http-proxy" \
            --address="${_SERVICE_NAME}-ip" \
            --ports=80
        else
          echo "Global Forwarding Rule '${_SERVICE_NAME}-forwarding-rule' already exists."
        fi
options:
  logging: CLOUD_LOGGING_ONLY